# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from getpass import getpass

"""
  Introduction to Metasploit

  Login normally
  Scroll and click begin lab
  Click start button
  Click terminal icon
  Click terminal window
  Enter ip addr and press enter
  Click terminal window exit
"""

username = input("Enter Username: ")
password = getpass()

class TestIwjnckawjnec():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  def test_iwjnckawjnec(self):
    # Test name: iwjnckawjnec
    # Step # | name | target | value
    # 1 | open | /login/index.php | 
    self.driver.get("https://cyrin.atcorp.com/course/view.php?id=17")
    # 2 | setWindowSize | 1920x1016 | 
    self.driver.set_window_size(1920, 1016)
    # 3 | click | id=username | 
    self.driver.find_element(By.ID, "username").click()
    # 4 | type | id=username | jacob.christoffers@ndsu.edu
    self.driver.find_element(By.ID, "username").send_keys(username)
    # 5 | click | id=password | 
    self.driver.find_element(By.ID, "password").click()
    # 6 | type | id=password | !1TestPassword
    self.driver.find_element(By.ID, "password").send_keys(password)
    # 7 | click | id=loginbtn | 
    self.driver.find_element(By.ID, "loginbtn").click()
    # 8 | click | css=.activity-btn:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".activity-btn:nth-child(1)").click()
    # 9 | selectFrame | index=0 | 
    self.driver.switch_to.frame(0)
    # 10 | click | name=control | 
    self.driver.find_element(By.NAME, "control").click()
    # 11 | mouseDown | css=canvas | 
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 12 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 13 | click | css=.exercise-page | 
    #self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 14 | mouseDown | css=canvas | 
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 15 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 16 | click | css=.exercise-page | 
    #self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 17 | mouseDown | css=canvas | 
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 18 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 19 | click | css=.exercise-page | 
    #self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
  
