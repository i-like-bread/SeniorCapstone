# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestGolden2():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  """
  - Go to page
  - Max window
  - Click and enter username
  - Click and enter password
  - Click login button
  - Click "Getting Started with CYRIN"
  - Scroll and click "Launch The Exercise"
  - Switch to frame
  - Click "Start The Exercise"
  - Click Computer Screen button and switch to Computer A (Ubuntu)
  - Click terminal icon
  - Click terminal box and enter "ls"
  - Click terminal x to close
  - Click end exercise button
  """

  def test_golden2(self):
    # Test name: Golden2
    # Step # | name | target | value | comment
    # 1 | open | /login/index.php |  | 
    self.driver.get("https://cyrin.atcorp.com/login/index.php")
    # 2 | setWindowSize | 2576x1416 |  | 
    self.driver.set_window_size(2576, 1416)
    # 3 | click | id=username |  | 
    self.driver.find_element(By.ID, "username").click()
    # 4 | type | id=username |  | 
    self.driver.find_element(By.ID, "username").send_keys("")
    # 5 | click | id=password |  | 
    self.driver.find_element(By.ID, "password").click()
    # 6 | type | id=password |  | 
    self.driver.find_element(By.ID, "password").send_keys("")
    # 7 | click | id=loginbtn |  | 
    self.driver.find_element(By.ID, "loginbtn").click()
    # 8 | click | css=#course-info-container-37-5 .aalink > .text-truncate |  | 
    self.driver.find_element(By.CSS_SELECTOR, "#course-info-container-37-5 .aalink > .text-truncate").click()
    # 9 | click | css=.activity-btn:nth-child(1) |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".activity-btn:nth-child(1)").click()
    # 10 | selectFrame | index=0 |  | 
    self.driver.switch_to.frame(0)
    # 11 | click | name=control |  | 
    self.driver.find_element(By.NAME, "control").click()
    # 12 | click | id=computersMenuButton |  | 
    self.driver.find_element(By.ID, "computersMenuButton").click()
    # 13 | click | id=machinestatus_Ubuntu2004Desktop-4000-0182-eba4edce-809a-3fe20a37e1aa |  | 
    self.driver.find_element(By.ID, "machinestatus_Ubuntu2004Desktop-4000-0182-eba4edce-809a-3fe20a37e1aa").click()
    # 14 | mouseDown | css=canvas |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 15 | mouseUp | id=noVNC_mouse_capture_elem |  | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 16 | click | css=.exercise-page |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 17 | mouseDown | css=canvas |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 18 | mouseUp | id=noVNC_mouse_capture_elem |  | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 19 | click | css=.exercise-page |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 20 | mouseDown | css=canvas |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 21 | mouseUp | id=noVNC_mouse_capture_elem |  | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 22 | click | css=.exercise-page |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 23 | click | id=btnEndExercise |  | 
    self.driver.find_element(By.ID, "btnEndExercise").click()
    # 24 | click | id=btnConfirmEndExercise |  | 
    self.driver.find_element(By.ID, "btnConfirmEndExercise").click()
  
