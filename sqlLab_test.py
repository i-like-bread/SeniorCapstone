# Generated by Selenium IDE
import pytest
import time
import json
import functions
from inspect import currentframe, getframeinfo
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from getpass import getpass

username = input("Enter Username: ")
password = getpass()

# Open lab "Detecting and Exploiting SQL Injection Vulnerabilities"
# Open FireFox
# Enter requested url
# Navigate to requested page
# Close FireFox

user_responses = list()  # list of user specified actions

class TestSqlInjection():
  def setup_method(self, method):
    self.chrome_options = webdriver.ChromeOptions()
    self.chrome_options.add_argument('--no-sandbox')
    self.driver = webdriver.Chrome(options=self.chrome_options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_sqlInjection(self):
    # Test name: sqlInjection
    # Step # | name | target | value
    # 1 | open | /login/index.php | 
    self.driver.get("https://cyrin.atcorp.com/course/view.php?id=26")
    # 2 | setWindowSize | 1552x840 | 
    # 2 | setWindowPosition | 0X0 |
    self.driver.set_window_position(0, 0)
    self.driver.set_window_size(1552, 840)
    # 3 | click | id=username | 
    self.driver.find_element(By.ID, "username").click()
    # 4 | type | id=username | username
    self.driver.find_element(By.ID, "username").send_keys(username)
    # 5 | click | id=password | 
    self.driver.find_element(By.ID, "password").click()
    # 6 | type | id=password | password
    self.driver.find_element(By.ID, "password").send_keys(password)
    # 7 | click | id=loginbtn | 
    self.driver.find_element(By.ID, "loginbtn").click()
    # 8 | click | css=.activity-btn:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".activity-btn:nth-child(1)").click()
    # 9 | selectFrame | index=0 | 
    self.driver.switch_to.frame(0)
    # 10 | click | name=control | 
    try:
        wait = WebDriverWait(self.driver, 120)
        wait.until(expected_conditions.element_to_be_clickable((By.NAME, "control")))
    except:
        print('By.NAME, "control" did not become clickable')
        self.driver.quit()
    self.driver.find_element(By.NAME, "control").click()
    try:
        wait = WebDriverWait(self.driver, 360)
        wait.until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "canvas")))
    except:
        print('By.CSS_SELECTOR, "canvas" did not become clickable')
        self.driver.quit()
    # 11 | mouseDown | css=canvas | 
    functions.perform_action(('MouseClick', (81, 397)))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 12 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 13 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 14 | mouseDown | css=canvas | 
    functions.perform_action(('MouseClick', (156, 356)))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 15 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 16 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 17 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 18 | mouseDown | css=canvas | 
    functions.perform_action(('KeyboardInput', ''))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 19 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 20 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 21 | mouseDown | css=canvas | 
    functions.perform_action(('MouseClick', (782, 357)))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 22 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 23 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 24 | mouseDown | css=canvas | 
    functions.perform_action('Continue')
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 25 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 26 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 27 | mouseDown | css=canvas | 
    functions.perform_action(('MouseClick', (999, 415)))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 28 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 29 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 30 | mouseDown | css=canvas | 
    functions.perform_action(('MouseClick', (1064, 802)))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 31 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 32 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 33 | mouseDown | css=canvas | 
    functions.perform_action(('MouseClick', (250, 772)))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 34 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 35 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
    # 36 | mouseDown | css=canvas | 
    functions.perform_action(('MouseClick', (1313, 277)))
    element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 37 | mouseUp | id=noVNC_mouse_capture_elem | 
    element = self.driver.find_element(By.ID, "noVNC_mouse_capture_elem")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 38 | click | css=.exercise-page | 
    self.driver.find_element(By.CSS_SELECTOR, ".exercise-page").click()
  

testClass = TestSqlInjection()
testClass.setup_method("")
testClass.test_sqlInjection()
print("Sleeping for 30 seconds. End lab manually and log out if you want")
time.sleep(30)
testClass.teardown_method("")

